TypeScript compiler arguments:
====================================


>>tsc 3_8_Generics.ts --out output-script.js

the above cmd will create new file called output-script.js and TypeScript code will get transpiled into the new files.

>> tsc 3_8_Generics.ts --out output-script.js --watch

--watch will constantly watches for changes, the moment you save the .ts files it will automatically transplies to .js file on the fly.

>> tsc -help

-help will print out all the options available.



Using tsconfig json file:
=================================

>> tsc --init

after running above cmd, it generates tsconfig.json file.
the file contains some configuration.

the target option lets you configure the JavaScript version of the output.
Now is contains few default values in config file.

Now, we just run cmd 'tsc'

>> tsc

now tsc cmd will compile all the .ts files under the current working directory using config file.

There are bunch of option in config file which commented out. they are like template, un-comment which ever is required for you.

strict: true
outDir: './out'
noEmitOnError: true


creating an npm project:
=================================


while typescript project you will be create a node project.

to create node project, cmd is

>> npm init

this will create package.json file. it will create node artifact. we can give it name or version. And, we can even publish to npm repository. 

npm init cmd, will ask lot of question, just type enter and it will take default values.

now is generates package.json
if you notice in the json there is main = index.js files.
this index file is starting point for your application. this index file will pull other required resources file to your application.
now in TypeScript project, the common convention is index.ts file.
then later this .ts file will get compiled into .js file.


we have created two files 'index.js' and 'Person.js'

now we run two cmds to excute the script:
>> tsc
>> node .\out\index.js

Now, we can do this two task by configuring in package.json., like

"scripts": {
    "start": "tsc && node out/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
  
Note:
there should be no error in .ts files. other npm start will not work and it will start complaining like - npm WARN Local package.json exists, but node_modules missing, did you mean to install?


Installing libaries and type definitations:
============================================

we will see how to install loadash into node module.
loadash is utility library for javascript, has lot of collections objects related... like array etc

>> npm install lodash --save

--save, will save as dependency in package.json or current project.

import * as _ from 'loadash';

here _ is aslias name. so _ is used esp. for lodash

now, here we cant use auto complete in editor. Becasue after package installation it gets only the .js files but not the .ts files. So, editor get auto complete details from .ts file.
So, either the vendor has to provide typescript version of the .js files. Or we can just use the type details (like doc, just declation details) by.,

npm install lodash-type-definiation
so all this type defination are avialable under @types/<package-name>

>> npm install @types/lodash --save-dev

--save-dev, tell that this dependency is only for developement. and it will not be bundled with the final output.

now you will get all type definiation details in the editor to use.

-- TS Start
import * as _ from 'lodash';

//loadasg sample

var array = [1,2,3,4,5];
console.log(_.reverse(array));

-- TS End

>> npm start



